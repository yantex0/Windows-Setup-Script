<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-AU&Keyboard=00000409&GeoLocation=12&ProcessorArchitecture=amd64&BypassNetworkCheck=true&ComputerNameMode=Random&CompactOsMode=Default&TimeZoneMode=Explicit&TimeZone=AUS+Eastern+Standard+Time&PartitionMode=Interactive&DiskAssertionMode=Skip&WindowsEditionMode=Firmware&InstallFromMode=Automatic&UserAccountMode=Unattended&AccountName0=Reece&AccountDisplayName0=&AccountPassword0=rowdypowdy&AccountGroup0=Administrators&AccountName1=Alicia&AccountDisplayName1=&AccountPassword1=rowdypowdy&AccountGroup1=Administrators&AutoLogonMode=Own&ObscurePasswords=true&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=Hidden&ShowFileExtensions=true&ClassicContextMenu=true&LaunchToThisPC=true&ShowEndTask=true&TaskbarSearch=Hide&TaskbarIconsMode=Default&DisableWidgets=true&LeftTaskbar=true&HideTaskViewButton=true&DisableBingResults=true&StartTilesMode=Default&StartPinsMode=Empty&DisableFastStartup=true&DisableSystemRestore=true&HardenSystemDriveAcl=true&AllowPowerShellScripts=true&DisableLastAccess=true&DisableAppSuggestions=true&PreventDeviceEncryption=true&HideEdgeFre=true&DisableEdgeStartupBoost=true&DisablePointerPrecision=true&DeleteWindowsOld=true&ProcessAudit=true&ProcessAuditCommandLine=true&EffectsMode=Default&DesktopIconsMode=Default&WifiMode=FromProfile&WifiProfileXml=%3C%3Fxml+version%3D%221.0%22%3F%3E%0D%0A%3CWLANProfile+xmlns%3D%22http%3A%2F%2Fwww.microsoft.com%2Fnetworking%2FWLAN%2Fprofile%2Fv1%22%3E%0D%0A%09%3Cname%3EWiiiiiifi%3C%2Fname%3E%0D%0A%09%3CSSIDConfig%3E%0D%0A%09%09%3CSSID%3E%0D%0A%09%09%09%3Chex%3E576969696969696669%3C%2Fhex%3E%0D%0A%09%09%09%3Cname%3EWiiiiiifi%3C%2Fname%3E%0D%0A%09%09%3C%2FSSID%3E%0D%0A%09%3C%2FSSIDConfig%3E%0D%0A%09%3CconnectionType%3EESS%3C%2FconnectionType%3E%0D%0A%09%3CconnectionMode%3Eauto%3C%2FconnectionMode%3E%0D%0A%09%3CMSM%3E%0D%0A%09%09%3Csecurity%3E%0D%0A%09%09%09%3CauthEncryption%3E%0D%0A%09%09%09%09%3Cauthentication%3EWPA3SAE%3C%2Fauthentication%3E%0D%0A%09%09%09%09%3Cencryption%3EAES%3C%2Fencryption%3E%0D%0A%09%09%09%09%3CuseOneX%3Efalse%3C%2FuseOneX%3E%0D%0A%09%09%09%09%3CtransitionMode+xmlns%3D%22http%3A%2F%2Fwww.microsoft.com%2Fnetworking%2FWLAN%2Fprofile%2Fv4%22%3Etrue%3C%2FtransitionMode%3E%0D%0A%09%09%09%3C%2FauthEncryption%3E%0D%0A%09%09%09%3CsharedKey%3E%0D%0A%09%09%09%09%3CkeyType%3EpassPhrase%3C%2FkeyType%3E%0D%0A%09%09%09%09%3Cprotected%3Efalse%3C%2Fprotected%3E%0D%0A%09%09%09%09%3CkeyMaterial%3EAFakePassword%3C%2FkeyMaterial%3E%0D%0A%09%09%09%3C%2FsharedKey%3E%0D%0A%09%09%3C%2Fsecurity%3E%0D%0A%09%3C%2FMSM%3E%0D%0A%09%3CMacRandomization+xmlns%3D%22http%3A%2F%2Fwww.microsoft.com%2Fnetworking%2FWLAN%2Fprofile%2Fv3%22%3E%0D%0A%09%09%3CenableRandomization%3Efalse%3C%2FenableRandomization%3E%0D%0A%09%09%3CrandomizationSeed%3E3003410527%3C%2FrandomizationSeed%3E%0D%0A%09%3C%2FMacRandomization%3E%0D%0A%3C%2FWLANProfile%3E%0D%0A&ExpressSettings=DisableAll&KeysMode=Skip&StickyKeysMode=Default&ColorMode=Custom&SystemColorTheme=Dark&AppsColorTheme=Dark&AccentColor=%230078d4&EnableTransparency=true&WallpaperMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveCamera=true&RemoveClipchamp=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGetHelp=true&RemoveHandwriting=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMathInputPanel=true&RemoveMediaFeatures=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOneSync=true&RemoveOpenSSHClient=true&RemoveOutlook=true&RemovePaint3D=true&RemovePeople=true&RemovePowerAutomate=true&RemovePowerShell2=true&RemoveQuickAssist=true&RemoveRecall=true&RemoveRdpClient=true&RemoveSkype=true&RemoveSnippingTool=true&RemoveSolitaire=true&RemoveSpeech=true&RemoveStepsRecorder=true&RemoveStickyNotes=true&RemoveTeams=true&RemoveGetStarted=true&RemoveToDo=true&RemoveVoiceRecorder=true&RemoveWallet=true&RemoveWeather=true&RemoveFaxAndScan=true&RemoveWindowsHello=true&RemoveWindowsMediaPlayer=true&RemoveZuneMusic=true&RemoveWordPad=true&RemoveXboxApps=true&RemoveYourPhone=true&FirstLogonScript0=%23+Elevate+if+needed%0D%0AIf+%28-NOT+%28%5BSecurity.Principal.WindowsPrincipal%5D+%5BSecurity.Principal.WindowsIdentity%5D%3A%3AGetCurrent%28%29%29.IsInRole%28%5BSecurity.Principal.WindowsBuiltInRole%5D+%22Administrator%22%29%29+%7B%0D%0A++++Start-Process+powershell+%22-ExecutionPolicy+Bypass+-File+%60%22%24PSCommandPath%60%22%22+-Verb+RunAs%0D%0A++++Exit%0D%0A%7D%0D%0A%0D%0A%23+Define+where+to+save+the+main+installer+script%0D%0A%24publicDesktopPath+%3D+%22C%3A%5CUsers%5CPublic%5CDesktop%22%0D%0A%24installerScriptPath+%3D+Join-Path+%24publicDesktopPath+%22InstallApplications.ps1%22%0D%0A%0D%0A%23+Define+the+script+content%0D%0A%24installerScriptContent+%3D+%40%27%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Auto-elevate+the+script+as+Administrator%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AIf+%28-NOT+%28%5BSecurity.Principal.WindowsPrincipal%5D+%5BSecurity.Principal.WindowsIdentity%5D%3A%3AGetCurrent%28%29%29.IsInRole%28%5BSecurity.Principal.WindowsBuiltInRole%5D+%22Administrator%22%29%29+%7B%0D%0A++++Write-Warning+%22Script+not+running+as+administrator.+Relaunching+elevated...%22%0D%0A++++Start-Process+powershell+%22-ExecutionPolicy+Bypass+-File+%60%22%24PSCommandPath%60%22%22+-Verb+RunAs%0D%0A++++Exit%0D%0A%7D%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Wait+for+explorer.exe+to+start%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Waiting+for+Explorer+%28desktop%29+to+fully+load...%22%0D%0A%0D%0A%24timeoutSeconds+%3D+300++%23+Max+total+wait+time+%285+minutes%29%0D%0A%24timer+%3D+%5BDiagnostics.Stopwatch%5D%3A%3AStartNew%28%29%0D%0A%0D%0Awhile+%28-not+%28Get-Process+explorer+-ErrorAction+SilentlyContinue%29%29+%7B%0D%0A++++Start-Sleep+-Seconds+2%0D%0A++++if+%28%24timer.Elapsed.TotalSeconds+-ge+%24timeoutSeconds%29+%7B%0D%0A++++++++Write-Warning+%22Timeout+waiting+for+Explorer+to+load.%22%0D%0A++++++++break%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0AWrite-Output+%22Explorer+is+running.%22%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Wait+for+network+connectivity%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Waiting+for+network+connectivity...%22%0D%0A%0D%0A%24timer.Restart%28%29%0D%0A%0D%0Awhile+%28-not+%28Test-Connection+-ComputerName+8.8.8.8+-Count+1+-Quiet+-ErrorAction+SilentlyContinue%29%29+%7B%0D%0A++++Start-Sleep+-Seconds+3%0D%0A++++if+%28%24timer.Elapsed.TotalSeconds+-ge+%24timeoutSeconds%29+%7B%0D%0A++++++++Write-Warning+%22Timeout+waiting+for+network.+Proceeding+anyway.%22%0D%0A++++++++break%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0AWrite-Output+%22Network+is+available.%22%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Remove+Microsoft+Edge+shortcut+from+Public+Desktop%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Checking+for+Microsoft+Edge+shortcut+on+Public+Desktop...%22%0D%0A%0D%0A%24edgeShortcutPath+%3D+%22C%3A%5CUsers%5CPublic%5CDesktop%5CMicrosoft+Edge.lnk%22%0D%0A%0D%0Aif+%28Test-Path+%24edgeShortcutPath%29+%7B%0D%0A++++Remove-Item+-Path+%24edgeShortcutPath+-Force%0D%0A++++Write-Output+%22Microsoft+Edge+shortcut+removed+from+Public+Desktop.%22%0D%0A%7D+else+%7B%0D%0A++++Write-Output+%22Microsoft+Edge+shortcut+not+found.+Nothing+to+remove.%22%0D%0A%7D%0D%0A%0D%0AWrite-Output+%22%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%22%0D%0AWrite-Output+%22%22%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Clean+Taskbar+Pins%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Cleaning+Taskbar+Pins...%22%0D%0A%0D%0Afunction+Unpin-AppFromTaskbar+%7B%0D%0A++++param+%28%5Bstring%5D%24AppName%29%0D%0A%0D%0A++++%24shell+%3D+New-Object+-ComObject+Shell.Application%0D%0A++++%24folder+%3D+%24shell.Namespace%28%27shell%3A%3A%3A%7B4234d49b-0245-4df3-b780-3893943456e1%7D%27%29%0D%0A++++%24item+%3D+%24folder.Items%28%29+%7C+Where-Object+%7B+%24_.Name+-eq+%24AppName+%7D%0D%0A%0D%0A++++if+%28%24item%29+%7B%0D%0A++++++++%24verbs+%3D+%24item.Verbs%28%29%0D%0A++++++++foreach+%28%24verb+in+%24verbs%29+%7B%0D%0A++++++++++++if+%28%24verb.Name.Replace%28%27%26%27%2C+%27%27%29+-match+%27Unpin+from+taskbar%27%29+%7B%0D%0A++++++++++++++++%24verb.DoIt%28%29%0D%0A++++++++++++++++Write-Output+%22Unpinned+%24AppName+from+Taskbar.%22%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D+else+%7B%0D%0A++++++++Write-Warning+%22%24AppName+not+found+on+Taskbar.%22%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0AStart-Sleep+-Seconds+5++%23+Give+time+for+Taskbar+to+fully+load%0D%0A%0D%0AUnpin-AppFromTaskbar+%22Microsoft+Edge%22%0D%0AUnpin-AppFromTaskbar+%22Microsoft+Store%22%0D%0A%0D%0AWrite-Output+%22Taskbar+cleaned.%22%0D%0AWrite-Output+%22%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%22%0D%0AWrite-Output+%22%22%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Install+Applications%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Starting+application+installation...%22%0D%0A%0D%0A%23+Define+path+to+install+log%0D%0A%24installLogPath+%3D+Join-Path+-Path+%28%5BEnvironment%5D%3A%3AGetFolderPath%28%27Desktop%27%29%29+-ChildPath+%27install_log.txt%27%0D%0A%0D%0A%23+Clear+existing+log+if+it+exists%0D%0Aif+%28Test-Path+%24installLogPath%29+%7B%0D%0A++++Remove-Item+%24installLogPath+-Force%0D%0A%7D%0D%0A%0D%0Afunction+Install-App+%7B%0D%0A++++param+%28%0D%0A++++++++%5Bstring%5D%24PackageId%2C%0D%0A++++++++%5Bint%5D%24Current%2C%0D%0A++++++++%5Bint%5D%24Total%0D%0A++++%29%0D%0A%0D%0A++++Write-Output+%22%5B%24Current%2F%24Total%5D+Installing+%24PackageId...%22%0D%0A++++try+%7B%0D%0A++++++++winget+install+%2D%2Did+%24PackageId+-e+%2D%2Daccept-package-agreements+%2D%2Daccept-source-agreements+%2D%2Dsilent%0D%0A++++++++Add-Content+-Path+%24installLogPath+-Value+%22SUCCESS+-+%24PackageId%22%0D%0A++++++++%24global%3AsuccessCount%2B%2B%0D%0A++++%7D+catch+%7B%0D%0A++++++++Write-Warning+%22Failed+to+install+%24PackageId%22%0D%0A++++++++Add-Content+-Path+%24installLogPath+-Value+%22FAILURE+-+%24PackageId%22%0D%0A++++++++%24global%3AfailureCount%2B%2B%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0A%24packages+%3D+%40%28%0D%0A++++%22Microsoft.WindowsTerminal%22%2C%0D%0A++++%22Brave.Brave%22%2C%0D%0A%09%22Microsoft.PowerShell%22%2C%0D%0A%09%22Git.Git%22%2C%0D%0A++++%22Google.GoogleDrive%22%2C%0D%0A++++%227zip.7zip%22%2C%0D%0A++++%22Notepad%2B%2B.Notepad%2B%2B%22%2C%0D%0A++++%22Dell.CommandUpdate.Universal%22%2C%0D%0A++++%22Logitech.GHUB%22%2C%0D%0A++++%22Valve.Steam%22%2C%0D%0A++++%22Proton.ProtonVPN%22%2C%0D%0A++++%22OpenWhisperSystems.Signal%22%2C%0D%0A++++%22Microsoft.VisualStudioCode%22%2C%0D%0A++++%229NT1R1C2HH7J%22%2C++%23+ChatGPT+Desktop%0D%0A++++%22GitHub.GitHubDesktop%22%2C%0D%0A++++%22Bitvise.SSH.Client%22%0D%0A%09%22Debian.Debian%22%0D%0A%29%0D%0A%0D%0A%23+Start+timing%0D%0A%24installStart+%3D+Get-Date%0D%0A%0D%0A%23+Track+success%2Ffailure+counts%0D%0A%24successCount+%3D+0%0D%0A%24failureCount+%3D+0%0D%0A%0D%0A%0D%0A%24totalPackages+%3D+%24packages.Count%0D%0A%24currentPackage+%3D+1%0D%0A%0D%0Aforeach+%28%24package+in+%24packages%29+%7B%0D%0A++++Install-App+-PackageId+%24package+-Current+%24currentPackage+-Total+%24totalPackages%0D%0A++++%24currentPackage%2B%2B%0D%0A%7D%0D%0A%0D%0A%23+End+timing%0D%0A%24installEnd+%3D+Get-Date%0D%0A%24installDuration+%3D+%24installEnd+-+%24installStart%0D%0A%0D%0AWrite-Output+%22%22%0D%0AWrite-Output+%22%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%22%0D%0AWrite-Output+%22Installation+Summary%3A%22%0D%0AWrite-Output+%22Successful+installs%3A+%24successCount%22%0D%0AWrite-Output+%22Failed+installs%3A+%24failureCount%22%0D%0AWrite-Output+%22Total+install+time%3A+%24%28%24installDuration.ToString%28%29%29%22%0D%0AWrite-Output+%22%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%22%0D%0A%0D%0A%23+Write+summary+to+a+second+file%0D%0A%24summaryPath+%3D+Join-Path+-Path+%28%5BEnvironment%5D%3A%3AGetFolderPath%28%27Desktop%27%29%29+-ChildPath+%27install_summary.txt%27%0D%0A%0D%0A%24summaryContent+%3D+%40%22%0D%0AInstallation+Summary%3A%0D%0ASuccessful+installs%3A+%24successCount%0D%0AFailed+installs%3A+%24failureCount%0D%0ATotal+install+time%3A+%24%28%24installDuration.ToString%28%29%29%0D%0A%22%40%0D%0A%0D%0ASet-Content+-Path+%24summaryPath+-Value+%24summaryContent+-Force%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Disable+Local+Admin%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0ADisable-LocalUser+-Name+%22Administrator%22%0D%0A%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%23+Creating+Outputs%0D%0A%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0AWrite-Output+%22Restarting+Explorer...%22%0D%0AStop-Process+-Name+explorer+-Force%0D%0AStart-Process+explorer%0D%0A%0D%0A%23+Open+the+install+log%0D%0AStart-Process+notepad.exe+%24installLogPath%0D%0A%0D%0A%23+Open+the+summary%0D%0AStart-Process+notepad.exe+%24summaryPath%0D%0A%27%40%0D%0A%0D%0A%23+Save+the+installer+script%0D%0ASet-Content+-Path+%24installerScriptPath+-Value+%24installerScriptContent+-Force+-Encoding+UTF8%0D%0A%0D%0AWrite-Output+%22Installer+script+created+at%3A+%24installerScriptPath%22%0D%0A%0D%0A%23+Run+the+installer+script%0D%0AStart-Process+powershell+%22-ExecutionPolicy+Bypass+-File+%60%22%24installerScriptPath%60%22%22+-Verb+RunAs&FirstLogonScriptType0=Ps1&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	<settings pass="windowsPE">
		<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<SetupUILanguage>
				<UILanguage>en-US</UILanguage>
			</SetupUILanguage>
			<InputLocale>0c09:00000409</InputLocale>
			<SystemLocale>en-AU</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-AU</UserLocale>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserData>
				<ProductKey>
					<Key>00000-00000-00000-00000-00000</Key>
					<WillShowUI>OnError</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<TimeZone>AUS Eastern Standard Time</TimeZone>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<InputLocale>0c09:00000409</InputLocale>
			<SystemLocale>en-AU</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-AU</UserLocale>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserAccounts>
				<LocalAccounts>
					<LocalAccount wcm:action="add">
						<Name>Reece</Name>
						<DisplayName></DisplayName>
						<Group>Administrators</Group>
						<Password>
							<Value>cgBvAHcAZAB5AHAAbwB3AGQAeQBQAGEAcwBzAHcAbwByAGQA</Value>
							<PlainText>false</PlainText>
						</Password>
					</LocalAccount>
					<LocalAccount wcm:action="add">
						<Name>Alicia</Name>
						<DisplayName></DisplayName>
						<Group>Administrators</Group>
						<Password>
							<Value>cgBvAHcAZAB5AHAAbwB3AGQAeQBQAGEAcwBzAHcAbwByAGQA</Value>
							<PlainText>false</PlainText>
						</Password>
					</LocalAccount>
				</LocalAccounts>
			</UserAccounts>
			<AutoLogon>
				<Username>Reece</Username>
				<Enabled>true</Enabled>
				<LogonCount>1</LogonCount>
				<Password>
					<Value>cgBvAHcAZAB5AHAAbwB3AGQAeQBQAGEAcwBzAHcAbwByAGQA</Value>
					<PlainText>false</PlainText>
				</Password>
			</AutoLogon>
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideOnlineAccountScreens>false</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
param(
    [xml] $Document
);

foreach( $file in $Document.unattend.Extensions.File ) {
    $path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' ) );
    mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
    $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
        default { [System.Text.Encoding]::Default; }
    };
    $bytes = $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() );
    [System.IO.File]::WriteAllBytes( $path, $bytes );
}
		</ExtractScript>
		<File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
$selectors = @(
	'Microsoft.Microsoft3DViewer';
	'Microsoft.BingSearch';
	'Microsoft.WindowsCamera';
	'Clipchamp.Clipchamp';
	'Microsoft.549981C3F5F10';
	'Microsoft.Windows.DevHome';
	'MicrosoftCorporationII.MicrosoftFamily';
	'Microsoft.WindowsFeedbackHub';
	'Microsoft.GetHelp';
	'Microsoft.Getstarted';
	'microsoft.windowscommunicationsapps';
	'Microsoft.WindowsMaps';
	'Microsoft.MixedReality.Portal';
	'Microsoft.BingNews';
	'Microsoft.MicrosoftOfficeHub';
	'Microsoft.Office.OneNote';
	'Microsoft.OutlookForWindows';
	'Microsoft.MSPaint';
	'Microsoft.People';
	'Microsoft.PowerAutomateDesktop';
	'MicrosoftCorporationII.QuickAssist';
	'Microsoft.SkypeApp';
	'Microsoft.ScreenSketch';
	'Microsoft.MicrosoftSolitaireCollection';
	'Microsoft.MicrosoftStickyNotes';
	'MicrosoftTeams';
	'MSTeams';
	'Microsoft.Todos';
	'Microsoft.WindowsSoundRecorder';
	'Microsoft.Wallet';
	'Microsoft.BingWeather';
	'Microsoft.Xbox.TCUI';
	'Microsoft.XboxApp';
	'Microsoft.XboxGameOverlay';
	'Microsoft.XboxGamingOverlay';
	'Microsoft.XboxIdentityProvider';
	'Microsoft.XboxSpeechToTextOverlay';
	'Microsoft.GamingApp';
	'Microsoft.YourPhone';
	'Microsoft.ZuneMusic';
	'Microsoft.ZuneVideo';
);
$getCommand = {
  Get-AppxProvisionedPackage -Online;
};
$filterCommand = {
  $_.DisplayName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
  }
};
$type = 'Package';
$logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1">
$selectors = @(
	'Print.Fax.Scan';
	'Language.Handwriting';
	'Browser.InternetExplorer';
	'MathRecognizer';
	'OneCoreUAP.OneSync';
	'OpenSSH.Client';
	'App.Support.QuickAssist';
	'Microsoft.Windows.SnippingTool';
	'Language.Speech';
	'Language.TextToSpeech';
	'App.StepsRecorder';
	'Hello.Face.18967';
	'Hello.Face.Migration.18967';
	'Hello.Face.20134';
	'Media.WindowsMediaPlayer';
	'Microsoft.Windows.WordPad';
);
$getCommand = {
  Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
    'NotPresent';
    'Removed';
  );
};
$filterCommand = {
  ($_.Name -split '~')[0] -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
  }
};
$type = 'Capability';
$logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1">
$selectors = @(
	'MediaPlayback';
	'MicrosoftWindowsPowerShellV2Root';
	'Microsoft-RemoteDesktopConnection';
	'Recall';
	'Microsoft-SnippingTool';
);
$getCommand = {
  Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
    'Disabled';
    'DisabledWithPayloadRemoved';
  );
};
$filterCommand = {
  $_.FeatureName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
  }
};
$type = 'Feature';
$logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\Wifi.xml">
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
	&lt;name&gt;Wiiiiiifi&lt;/name&gt;
	&lt;SSIDConfig&gt;
		&lt;SSID&gt;
			&lt;hex&gt;576969696969696669&lt;/hex&gt;
			&lt;name&gt;Wiiiiiifi&lt;/name&gt;
		&lt;/SSID&gt;
	&lt;/SSIDConfig&gt;
	&lt;connectionType&gt;ESS&lt;/connectionType&gt;
	&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
	&lt;MSM&gt;
		&lt;security&gt;
			&lt;authEncryption&gt;
				&lt;authentication&gt;WPA3SAE&lt;/authentication&gt;
				&lt;encryption&gt;AES&lt;/encryption&gt;
				&lt;useOneX&gt;false&lt;/useOneX&gt;
				&lt;transitionMode xmlns="http://www.microsoft.com/networking/WLAN/profile/v4"&gt;true&lt;/transitionMode&gt;
			&lt;/authEncryption&gt;
			&lt;sharedKey&gt;
				&lt;keyType&gt;passPhrase&lt;/keyType&gt;
				&lt;protected&gt;false&lt;/protected&gt;
				&lt;keyMaterial&gt;kindvase961&lt;/keyMaterial&gt;
			&lt;/sharedKey&gt;
		&lt;/security&gt;
	&lt;/MSM&gt;
	&lt;MacRandomization xmlns="http://www.microsoft.com/networking/WLAN/profile/v3"&gt;
		&lt;enableRandomization&gt;false&lt;/enableRandomization&gt;
		&lt;randomizationSeed&gt;3003410527&lt;/randomizationSeed&gt;
	&lt;/MacRandomization&gt;
&lt;/WLANProfile&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
$json = '{"pinnedList":[]}';
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	return;
}
$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetColorTheme.ps1">
$lightThemeSystem = 0;
$lightThemeApps = 0;
$accentColorOnStart = 0;
$enableTransparency = 1;
$htmlAccentColor = '#0078D4';
&amp; {
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize';
		Force = $true;
		Type = 'DWord';
	};
	Set-ItemProperty @params -Name 'SystemUsesLightTheme' -Value $lightThemeSystem;
	Set-ItemProperty @params -Name 'AppsUseLightTheme' -Value $lightThemeApps;
	Set-ItemProperty @params -Name 'ColorPrevalence' -Value $accentColorOnStart;
	Set-ItemProperty @params -Name 'EnableTransparency' -Value $enableTransparency;
};
&amp; {
	Add-Type -AssemblyName 'System.Drawing';
	$accentColor = [System.Drawing.ColorTranslator]::FromHtml( $htmlAccentColor );

	function ConvertTo-DWord {
		param(
			[System.Drawing.Color]
			$Color
		);
						
		[byte[]] $bytes = @(
			$Color.R;
			$Color.G;
			$Color.B;
			$Color.A;
		);
		return [System.BitConverter]::ToUInt32( $bytes, 0); 
	}

	$startColor = [System.Drawing.Color]::FromArgb( 0xD2, $accentColor );
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'StartColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'AccentColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\DWM' -Name 'AccentColor' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent';
		Name = 'AccentPalette';
	};
	$palette = Get-ItemPropertyValue @params;
	$index = 20;
	$palette[ $index++ ] = $accentColor.R;
	$palette[ $index++ ] = $accentColor.G;
	$palette[ $index++ ] = $accentColor.B;
	$palette[ $index++ ] = $accentColor.A;
	Set-ItemProperty @params -Value $palette -Type 'Binary' -Force;
};
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-01.ps1">
# Elevate if needed
If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Start-Process powershell "-ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    Exit
}

# Define where to save the main installer script
$publicDesktopPath = "C:\Users\Public\Desktop"
$installerScriptPath = Join-Path $publicDesktopPath "InstallApplications.ps1"

# Define the script content
$installerScriptContent = @'
########################################
# Auto-elevate the script as Administrator
########################################

If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "Script not running as administrator. Relaunching elevated..."
    Start-Process powershell "-ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    Exit
}

########################################
# Wait for explorer.exe to start
########################################

Write-Output "Waiting for Explorer (desktop) to fully load..."

$timeoutSeconds = 300  # Max total wait time (5 minutes)
$timer = [Diagnostics.Stopwatch]::StartNew()

while (-not (Get-Process explorer -ErrorAction SilentlyContinue)) {
    Start-Sleep -Seconds 2
    if ($timer.Elapsed.TotalSeconds -ge $timeoutSeconds) {
        Write-Warning "Timeout waiting for Explorer to load."
        break
    }
}

Write-Output "Explorer is running."

########################################
# Wait for network connectivity
########################################

Write-Output "Waiting for network connectivity..."

$timer.Restart()

while (-not (Test-Connection -ComputerName 8.8.8.8 -Count 1 -Quiet -ErrorAction SilentlyContinue)) {
    Start-Sleep -Seconds 3
    if ($timer.Elapsed.TotalSeconds -ge $timeoutSeconds) {
        Write-Warning "Timeout waiting for network. Proceeding anyway."
        break
    }
}

Write-Output "Network is available."

########################################
# Remove Microsoft Edge shortcut from Public Desktop
########################################

Write-Output "Checking for Microsoft Edge shortcut on Public Desktop..."

$edgeShortcutPath = "C:\Users\Public\Desktop\Microsoft Edge.lnk"

if (Test-Path $edgeShortcutPath) {
    Remove-Item -Path $edgeShortcutPath -Force
    Write-Output "Microsoft Edge shortcut removed from Public Desktop."
} else {
    Write-Output "Microsoft Edge shortcut not found. Nothing to remove."
}

Write-Output "##########################"
Write-Output ""

########################################
# Clean Taskbar Pins
########################################

Write-Output "Cleaning Taskbar Pins..."

function Unpin-AppFromTaskbar {
    param ([string]$AppName)

    $shell = New-Object -ComObject Shell.Application
    $folder = $shell.Namespace('shell:::{4234d49b-0245-4df3-b780-3893943456e1}')
    $item = $folder.Items() | Where-Object { $_.Name -eq $AppName }

    if ($item) {
        $verbs = $item.Verbs()
        foreach ($verb in $verbs) {
            if ($verb.Name.Replace('&amp;', '') -match 'Unpin from taskbar') {
                $verb.DoIt()
                Write-Output "Unpinned $AppName from Taskbar."
            }
        }
    } else {
        Write-Warning "$AppName not found on Taskbar."
    }
}

Start-Sleep -Seconds 5  # Give time for Taskbar to fully load

Unpin-AppFromTaskbar "Microsoft Edge"
Unpin-AppFromTaskbar "Microsoft Store"

Write-Output "Taskbar cleaned."
Write-Output "##########################"
Write-Output ""

########################################
# Install Applications
########################################

Write-Output "Starting application installation..."

# Define path to install log
$installLogPath = Join-Path -Path ([Environment]::GetFolderPath('Desktop')) -ChildPath 'install_log.txt'

# Clear existing log if it exists
if (Test-Path $installLogPath) {
    Remove-Item $installLogPath -Force
}

function Install-App {
    param (
        [string]$PackageId,
        [int]$Current,
        [int]$Total
    )

    Write-Output "[$Current/$Total] Installing $PackageId..."
    try {
        winget install --id $PackageId -e --accept-package-agreements --accept-source-agreements --silent
        Add-Content -Path $installLogPath -Value "SUCCESS - $PackageId"
        $global:successCount++
    } catch {
        Write-Warning "Failed to install $PackageId"
        Add-Content -Path $installLogPath -Value "FAILURE - $PackageId"
        $global:failureCount++
    }
}

$packages = @(
    "Microsoft.WindowsTerminal",
    "Brave.Brave",
	"Microsoft.PowerShell",
	"Git.Git",
    "Google.GoogleDrive",
    "7zip.7zip",
    "Notepad++.Notepad++",
    "Dell.CommandUpdate.Universal",
    "Logitech.GHUB",
    "Valve.Steam",
    "Proton.ProtonVPN",
    "OpenWhisperSystems.Signal",
    "Microsoft.VisualStudioCode",
    "9NT1R1C2HH7J",  # ChatGPT Desktop
    "GitHub.GitHubDesktop",
    "Bitvise.SSH.Client"
	"Debian.Debian"
)

# Start timing
$installStart = Get-Date

# Track success/failure counts
$successCount = 0
$failureCount = 0


$totalPackages = $packages.Count
$currentPackage = 1

foreach ($package in $packages) {
    Install-App -PackageId $package -Current $currentPackage -Total $totalPackages
    $currentPackage++
}

# End timing
$installEnd = Get-Date
$installDuration = $installEnd - $installStart

Write-Output ""
Write-Output "##########################"
Write-Output "Installation Summary:"
Write-Output "Successful installs: $successCount"
Write-Output "Failed installs: $failureCount"
Write-Output "Total install time: $($installDuration.ToString())"
Write-Output "##########################"

# Write summary to a second file
$summaryPath = Join-Path -Path ([Environment]::GetFolderPath('Desktop')) -ChildPath 'install_summary.txt'

$summaryContent = @"
Installation Summary:
Successful installs: $successCount
Failed installs: $failureCount
Total install time: $($installDuration.ToString())
"@

Set-Content -Path $summaryPath -Value $summaryContent -Force

########################################
# Disable Local Admin
########################################

Disable-LocalUser -Name "Administrator"

########################################
# Creating Outputs
########################################

Write-Output "Restarting Explorer..."
Stop-Process -Name explorer -Force
Start-Process explorer

# Open the install log
Start-Process notepad.exe $installLogPath

# Open the summary
Start-Process notepad.exe $summaryPath
'@

# Save the installer script
Set-Content -Path $installerScriptPath -Value $installerScriptContent -Force -Encoding UTF8

Write-Output "Installer script created at: $installerScriptPath"

# Run the installer script
Start-Process powershell "-ExecutionPolicy Bypass -File `"$installerScriptPath`"" -Verb RunAs
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
$scripts = @(
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE" /v BypassNRO /t REG_DWORD /d 1 /f;
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe', 'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw | Invoke-Expression;
	};
	{
		netsh.exe wlan add profile filename="C:\Windows\Setup\Scripts\Wifi.xml" user=all;
	};
	{
		netsh.exe wlan connect name="Wiiiiiifi" ssid="Wiiiiiifi";
	};
	{
		net.exe accounts /maxpwage:UNLIMITED;
	};
	{
		icacls.exe C:\ /remove:g "*S-1-5-11"
	};
	{
		auditpol.exe /set /subcategory:"{0CCE922B-69AE-11D9-BED3-505054503030}" /success:enable /failure:enable;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit" /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1 /f;
	};
	{
		Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
	};
	{
		fsutil.exe behavior set disableLastAccess 1;
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Power" /v HiberbootEnabled /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\BitLocker" /v "PreventDeviceEncryption" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v BackgroundModeEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v StartupBoostEnabled /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
$scripts = @(
	{
		Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
	};
	{
		$params = @{
			Path = 'Registry::HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32';
			ErrorAction = 'SilentlyContinue';
			Force = $true;
		};
		New-Item @params;
		Set-ItemProperty @params -Name '(Default)' -Value '' -Type 'String';
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'LaunchTo' -Type 'DWord' -Value 1;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Search' -Name 'SearchboxTaskbarMode' -Type 'DWord' -Value 0;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetColorTheme.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
		} | Stop-Process -Force;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
$scripts = @(
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
	};
	{
		Remove-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'OneDriveSetup' -Force -ErrorAction 'Continue';
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\GameDVR" /v AppCaptureEnabled /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
	};
	{
		$names = @(
		  'ContentDeliveryAllowed';
		  'FeatureManagementEnabled';
		  'OEMPreInstalledAppsEnabled';
		  'PreInstalledAppsEnabled';
		  'PreInstalledAppsEverEnabled';
		  'SilentInstalledAppsEnabled';
		  'SoftLandingEnabled';
		  'SubscribedContentEnabled';
		  'SubscribedContent-310093Enabled';
		  'SubscribedContent-338387Enabled';
		  'SubscribedContent-338388Enabled';
		  'SubscribedContent-338389Enabled';
		  'SubscribedContent-338393Enabled';
		  'SubscribedContent-353698Enabled';
		  'SystemPaneSuggestionsEnabled';
		);
		
		foreach( $name in $names ) {
		  reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v $name /t REG_DWORD /d 0 /f;
		}
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
	};
	{
		$params = @{
		  LiteralPath = 'Registry::HKU\DefaultUser\Control Panel\Mouse';
		  Type = 'String';
		  Value = 0;
		  Force = $true;
		};
		Set-ItemProperty @params -Name 'MouseSpeed';
		Set-ItemProperty @params -Name 'MouseThreshold1';
		Set-ItemProperty @params -Name 'MouseThreshold2';
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\TaskbarDeveloperSettings" /v TaskbarEndTask /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\DWM" /v ColorPrevalence /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -WindowStyle Normal -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
$scripts = @(
	{
		Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
	};
	{
		Disable-ComputerRestore -Drive 'C:\';
	};
	{
		cmd.exe /c "rmdir C:\Windows.old";
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-01.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>